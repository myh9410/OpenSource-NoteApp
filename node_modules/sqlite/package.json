{
  "_args": [
    [
      {
        "raw": "sqlite@^2.5.0",
        "scope": null,
        "escapedName": "sqlite",
        "name": "sqlite",
        "rawSpec": "^2.5.0",
        "spec": ">=2.5.0 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\Yong Ho\\Desktop\\polymer-note-app-skeleton-master (2)\\polymer-note-app-skeleton-master\\note-app"
    ]
  ],
  "_from": "sqlite@>=2.5.0 <3.0.0",
  "_id": "sqlite@2.5.0",
  "_inCache": true,
  "_location": "/sqlite",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/sqlite-2.5.0.tgz_1490320824945_0.06598054082132876"
  },
  "_npmUser": {
    "name": "theo.gravity",
    "email": "theo@suteki.nu"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sqlite@^2.5.0",
    "scope": null,
    "escapedName": "sqlite",
    "name": "sqlite",
    "rawSpec": "^2.5.0",
    "spec": ">=2.5.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/sqlite/-/sqlite-2.5.0.tgz",
  "_shasum": "8298c13851c01be315e23af620e225c8279fb44c",
  "_shrinkwrap": null,
  "_spec": "sqlite@^2.5.0",
  "_where": "C:\\Users\\Yong Ho\\Desktop\\polymer-note-app-skeleton-master (2)\\polymer-note-app-skeleton-master\\note-app",
  "author": {
    "name": "Kriasoft",
    "email": "hello@kriasoft.com",
    "url": "http://www.kriasoft.com"
  },
  "bugs": {
    "url": "https://github.com/kriasoft/node-sqlite/issues"
  },
  "contributors": [
    {
      "name": "Konstantin Tarkus",
      "email": "hello@tarkus.me",
      "url": "https://twitter.com/koistya"
    }
  ],
  "dependencies": {
    "sqlite3": "^3.1.8"
  },
  "description": "SQLite client for Node.js applications with SQL-based migrations API",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "8298c13851c01be315e23af620e225c8279fb44c",
    "tarball": "https://registry.npmjs.org/sqlite/-/sqlite-2.5.0.tgz"
  },
  "homepage": "https://github.com/kriasoft/node-sqlite#readme",
  "jsnext:main": "main.mjs",
  "keywords": [
    "sqlite",
    "db",
    "database",
    "sql",
    "migrate",
    "migration",
    "migrations",
    "migrator",
    "seed",
    "seeds",
    "seeder",
    "node",
    "node5",
    "babel",
    "es6",
    "async",
    "promise",
    "promises",
    "api"
  ],
  "license": "MIT",
  "main": "main.js",
  "maintainers": [
    {
      "name": "theo.gravity",
      "email": "theo@suteki.nu"
    }
  ],
  "name": "sqlite",
  "optionalDependencies": {},
  "readme": "## SQLite Client for Node.js Apps\n\n[![NPM version](http://img.shields.io/npm/v/sqlite.svg?style=flat-square)](https://www.npmjs.com/package/sqlite)\n[![NPM downloads](http://img.shields.io/npm/dm/sqlite.svg?style=flat-square)](https://www.npmjs.com/package/sqlite)\n[![Build Status](http://img.shields.io/travis/kriasoft/node-sqlite/master.svg?style=flat-square)](https://travis-ci.org/kriasoft/node-sqlite)\n[![Dependency Status](http://img.shields.io/david/kriasoft/node-sqlite.svg?style=flat-square)](https://david-dm.org/kriasoft/node-sqlite)\n[![Online Chat](http://img.shields.io/badge/chat-%23node--sqlite_on_Gitter-blue.svg?style=flat-square)](https://gitter.im/kriasoft/node-sqlite)\n\n> A wrapper library that adds ES6 promises and SQL-based migrations API to\n> [sqlite3](https://github.com/mapbox/node-sqlite3/) ([docs](https://github.com/mapbox/node-sqlite3/wiki)).\n\n---\n\n<p align=\"center\"><b>ðŸ”¥ Want to strengthen your core JavaScript skills and master ES6?</b><br>I would personally recommend this awesome <a href=\"https://es6.io/friend/konstantin\">ES6 course</a> by Wes Bos.</p>\n\n---\n\n\n### How to Install\n\n```sh\n$ npm install sqlite --save\n```\n\n\n### How to Use\n\nThis module has the same API as the original `sqlite3` library ([docs](https://github.com/mapbox/node-sqlite3/wiki/API)),\nexcept that all its API methods return ES6 Promises and do not accept callback arguments.\n\nBelow is an example of how to use it with [Node.js](https://nodejs.org), [Express](http://expressjs.com/starter/hello-world.html) and [Babel](http://babeljs.io/):\n\n```js\nimport express from 'express';\nimport Promise from 'bluebird';\nimport db from 'sqlite';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.get('/post/:id', async (req, res, next) => {\n  try {\n    const [post, categories] = await Promise.all([\n      db.get('SELECT * FROM Post WHERE id = ?', req.params.id),\n      db.all('SELECT * FROM Category');\n    ]);\n    res.render('post', { post, categories });\n  } catch (err) {\n    next(err);\n  }\n});\n\nPromise.resolve()\n  // First, try connect to the database\n  .then(() => db.open('./database.sqlite', { Promise }))\n  .catch(err => console.error(err.stack))\n  // Finally, launch Node.js app\n  .finally(() => app.listen(port));\n```\n\n**NOTE**: For Node.js v5 and below use `var db = require('sqlite/legacy');`.\n\n\n### Migrations\n\nThis module comes with a lightweight migrations API that works with [SQL-based migration files](https://github.com/kriasoft/node-sqlite/tree/master/migrations)\nas the following example demonstrates:\n\n##### `migrations/001-initial-schema.sql`\n\n```sql\n-- Up\nCREATE TABLE Category (id INTEGER PRIMARY KEY, name TEXT);\nCREATE TABLE Post (id INTEGER PRIMARY KEY, categoryId INTEGER, title TEXT,\n  CONSTRAINT Post_fk_categoryId FOREIGN KEY (categoryId)\n    REFERENCES Category (id) ON UPDATE CASCADE ON DELETE CASCADE);\nINSERT INTO Category (id, name) VALUES (1, 'Business');\nINSERT INTO Category (id, name) VALUES (2, 'Technology');\n\n-- Down\nDROP TABLE Category\nDROP TABLE Post;\n```\n\n##### `migrations/002-missing-index.sql`\n\n```sql\n-- Up\nCREATE INDEX Post_ix_categoryId ON Post (categoryId);\n\n-- Down\nDROP INDEX Post_ix_categoryId;\n```\n\n##### `app.js` (Node.js/Express)\n\n```js\nimport express from 'express';\nimport Promise from 'bluebird';\nimport db from 'sqlite';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(/* app routes */);\n\nPromise.resolve()\n  // First, try connect to the database and update its schema to the latest version\n  .then(() => db.open('./database.sqlite', { Promise }))\n  .then(() => db.migrate({ force: 'last' }))\n  .catch(err => console.error(err.stack))\n  // Finally, launch Node.js app\n  .finally(() => app.listen(port));\n```\n\n**NOTE**: For the development environment, while working on the database schema, you may want to set\n`force: 'last'` (default `false`) that will force the migration API to rollback and re-apply the\nlatest migration over again each time when Node.js app launches. \n\n\n### Multiple Connections\n\nThe `open` method resolves to the db instance which can be used in order to reference multiple open databases.\n\nES6\n```\nimport sqlite from 'sqlite';\n\nPromise.all([\n  sqlite.open('./main.sqlite', { Promise }),\n  sqlite.open('./users.sqlite', { Promise })\n]).then(function([mainDb, usersDb]){\n  ...\n});\n```\n\nES7+ Async/Await\n\n```\nimport sqlite from 'sqlite';\n\nasync function main() {\n  const [mainDb, usersDb] = await Promise.all([\n    sqlite.open('./main.sqlite', { Promise }),\n    sqlite.open('./users.sqlite', { Promise })\n  ]);\n  ...\n}\nmain();\n```\n\n### References\n\n* [Using SQLite with Node.js for Rapid Prototyping](https://medium.com/@tarkus/node-js-and-sqlite-for-rapid-prototyping-bc9cf1f26f10) on Medium.com\n* [SQLite Documentation](https://www.sqlite.org/docs.html), e.g. [SQL Syntax](https://www.sqlite.org/lang.html), [Data Types](https://www.sqlite.org/datatype3.html) etc. on SQLite.org\n\n\n### Related Projects\n\n* [React Starter Kit](https://github.com/kriasoft/react-starter-kit) â€” Isomorphic web app boilerplate (Node.js/Express, React.js, GraphQL)\n* [ASP.NET Core Starter Kit](https://github.com/kriasoft/react-starter-kit) â€” Single-page app boilerplate (ASP.NET Core, React.js, Web API)\n* [Babel Starter Kit](https://github.com/kriasoft/babel-starter-kit) â€” JavaScript library boilerplate (ES2015, Babel, Rollup)\n* [Membership Database](https://github.com/membership/membership.db) â€” SQL database boilerplate for web app users, roles and auth tokens\n\n\n### Support\n\n* Join [#node-sqlite](https://gitter.im/kriasoft/node-sqlite) chat room on Gitter to stay up to date regarding the project\n* Join [#sqlite](https://webchat.freenode.net/?channels=sql,sqlite) IRC chat room on Freenode about general discussion about SQLite\n\n\n### License\n\nThe MIT License Â© 2015-2016 Kriasoft, LLC. All rights reserved.\n\n---\nMade with â™¥ by Konstantin Tarkus ([@koistya](https://twitter.com/koistya)) and [contributors](https://github.com/kriasoft/node-sqlite/graphs/contributors)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kriasoft/node-sqlite.git"
  },
  "scripts": {},
  "types": "main.d.ts",
  "version": "2.5.0"
}
